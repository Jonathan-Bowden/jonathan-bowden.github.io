import pandas as pd

from sklearn.linear_model import LogisticRegression
# read the train and test dataset
import sklearn
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn import metrics
data = pd.read_csv('train.csv')


#analyze dataset
data.head()
print(data.shape)
data.columns
print(data.info())
data.describe()

#lets transform some data
#break the name field to get meaningful information like Mr, Mrs, miss, special etc
data.Name.tail()
#extract anything have a dot at the end into Title
data['Title'] = data.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))

#replace title now
data['Title'] = data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})
data['Title'] = data['Title'].replace(['Don', 'Dona', 'Rev', 'Dr','Major', 'Lady', 'Sir', 'Col', 'Capt', 'Countess', 'Jonkheer'],'Special')

#also insert a new colun 'Has_cabin' 
data['Has_Cabin'] = ~data.Cabin.isnull()

data.tail()

#notice there are many data where age is not given
#fill the age with median value. 
#lets do the same with fare
#lets do the same with Emabrked - missing with 'S'

data['Age'] = data.Age.fillna(data.Age.median())
data['Fare'] = data.Fare.fillna(data.Fare.median())
data['Embarked'] = data['Embarked'].fillna('S')

#lets drop some useless data
data.drop(['Cabin', 'Name', 'PassengerId', 'Ticket'], axis=1, inplace=True)

#let us categorize the age and fare so that it helps in analysis
# Binning numerical columns
data['CatAge'] = pd.qcut(data.Age, q=4, labels=False )
data['CatFare']= pd.qcut(data.Fare, q=4, labels=False)

#now we may drop fare and age as we have the data we need
data = data.drop(['Age', 'Fare'], axis=1)

# Create column of number of Family members onboard
data['Fam_Size'] = data.Parch + data.SibSp

# now to do 
# create a column sex_male and fill wit 0 or 1
data['Sex'] = data['Sex'].replace({'female':0, 'male':1})
data['Embarked'] = data['Embarked'].replace({'S':0, 'C':1, 'Q':2})

#drop sex
#change the Embarked column to a numeric value as well
#data = data.drop(['Sex'], axis=1)
data = data.drop(['Title'], axis=1)
#data = data.drop(['Embarked'], axis=1)
test_data, train_data = sklearn.model_selection.train_test_split(data, train_size=.80, test_size=.20)
print(test_data.head())
print(train_data.head())

# Now, we need to predict the missing target variable in the test data
# target variable - Survived

# seperate the independent and target variable on training data
train_x = train_data.drop(columns=['Survived'],axis=1)
train_y = train_data['Survived']

# seperate the independent and target variable on testing data
test_x = test_data.drop(columns=['Survived'],axis=1)
test_y = test_data['Survived']


model = LogisticRegression()

# fit the model with the training data
model.fit(train_x,train_y)

# coefficeints of the trained model
print('Coefficient of model :', model.coef_)

# intercept of the model
print('Intercept of model',model.intercept_)

# predict the target on the train dataset
predict_train = model.predict(train_x)
print('Target on train data',predict_train) 

# Accuray Score on train dataset
accuracy_train = accuracy_score(train_y,predict_train)
print('accuracy_score on train dataset : ', accuracy_train)

# predict the target on the test dataset
predict_test = model.predict(test_x)
print('Target on test data',predict_test) 

# Accuracy Score on test dataset
accuracy_test = accuracy_score(test_y,predict_test)
print('accuracy_score on test dataset : ', accuracy_test)

result=metrics.confusion_matrix(test_y, predict_test)
print('Confusion Matrix  on test dataset : ', result)


